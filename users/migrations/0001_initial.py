# Generated by Django 3.0.4 on 2020-03-26 17:24

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Teléfono:')),
                ('universidad', models.CharField(blank=True, max_length=50, null=True, verbose_name='Universidad:')),
                ('photo', models.URLField(blank=True, default='https://pwcenter.org/sites/default/files/styles/profile_image/public/default_images/default_profile.png?itok=wW1obErD', help_text='Pega el link de tu foto de: linkedin, facebook u otro. Le das click derecho a la imagen y seleccionas COPIAR DIRECCIÓN de la IMAGEN', max_length=1000, null=True, verbose_name='Foto de perfil (URL):')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, help_text='Una frase favorita o como de describe.', max_length=255, null=True, verbose_name='Descripción:')),
                ('bio', tinymce.models.HTMLField(blank=True, null=True, verbose_name='Biografía o Experiencia')),
                ('age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Edad:')),
                ('facebook', models.URLField(blank=True, null=True, verbose_name='Facebook (url):')),
                ('linkedin', models.URLField(blank=True, null=True, verbose_name='Linkedin (url):')),
                ('twitter', models.URLField(blank=True, null=True, verbose_name='Twitter (url):')),
                ('instagram', models.URLField(blank=True, null=True, verbose_name='Instagram (url):')),
                ('web', models.URLField(blank=True, null=True, verbose_name='Web (url):')),
                ('estado', models.BooleanField(default=True, verbose_name='Autor Activo/No Activos')),
                ('date_creation', models.DateField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
